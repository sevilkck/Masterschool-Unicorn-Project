Data Exploration with SQL
Unicorn Database
postgresql://Test:bQNxVzJL4g6u@ep-noisy-flower-846766-pooler.us-east-2.aws.neon.tech/Unicorn

--Question 1: How many customers do we have in the data?

SELECT COUNT (customer_id) AS total_num_customer 
FROM customers;

--This query counts the total number of entries in the customers table
--As customer_id is unique, I didn`t write the query based on COUNT(DISTINCT customer_id)
--SOLUTION (total_num_customer 795)


--Question 2: What was the city with the most profit for the company in 2015?

SELECT o.shipping_city, '$' || TO_CHAR(SUM(od.order_profits), '999,999,990.00') AS total_profit
FROM orders o
JOIN order_details od 
USING (order_id)
WHERE EXTRACT(YEAR FROM o.order_date) = 2015
GROUP BY o.shipping_city
ORDER BY total_profit DESC
LIMIT 1;
--SOLUTION (New York City, 14753)
--We first join the orders and order_details tables using the order_id
--Then, we filter the data to only include orders placed in the year 2015
--By grouping the results by city and summing the profit column, we can rank cities by total profit and identify the top-performing location in that year


--Question 3: In 2015, what was the most profitable city's profit?

SELECT o.shipping_city, '$' || TO_CHAR(SUM(od.order_profits), '999,999,990.00') AS highest_profit
FROM orders o
JOIN order_details od 
USING (order_id)
WHERE EXTRACT(YEAR FROM o.order_date) = 2015
GROUP BY o.shipping_city
ORDER BY highest_profit DESC
LIMIT 1;
--This query identifies the highest profit of the most profitable city in 2015 by joining orders with order_details
--First we join the orders with order_details  using order_id to access profit values
--Filtering orders placed in 2015
--Grouping the orders together by city name
--It then calculates the total profit for each specific city by summing the profit values from the order_details table
--This helps quantify the financial impact of the top-performing city in that year
--SOLUTION (14753)

--Question 4: How many different cities do we have in the data?
--Please refer just to the city name and not similar city names in different states

SELECT COUNT(DISTINCT shipping_city) AS unique_cities
FROM orders;
--This query retrieves the number of distinct values in the shipping_city column of the orders table
--By using the DISTINCT keyword, we ensure that each city name is only counted once, regardless of how many times it appears
--Since the question specifically asks to count unique city names without differentiating between cities in different states, we avoid using both city and state in combination.
--This provides a simplified view of geographical reach based on city names alone
--SOLUTION (unique_cities count 531)

--Question 5: What is the most profitable city in the State of Tennessee?

SELECT o.shipping_city, '$' || TO_CHAR(SUM(od.order_profits), '999,999,990.00') AS total_profit
FROM orders o
JOIN order_details od 
USING (order_id)
WHERE o.shipping_state = 'Tennessee'
GROUP BY o.shipping_city
ORDER BY SUM(od.order_profits) DESC
LIMIT 1;
--SOLUTION (Lebanon with the total profit of $83)
--Sums total profit per city in Tennessee
--Formats the result with a $ sign using TO-CHAR
--Sorts using the raw SUM to avoid string-sorting issues
--Returns the most profitable city also by numeric value

--Question 6: What is the distribution of customer types in the data?

SELECT customer_segment, COUNT(customer_id) AS total_customer_distribution
FROM customers
GROUP BY customer_segment;
--SOLUTION(Consumer/410, Corporate/237, Home-Office/148)
--This query retrieves the distribution of customer segments from the customers table
--Grouping customers by segment type
--Counts how many customers belong to each segment by customer_id
--Shows total number of customers per segment category

--Question 7: Which was the biggest order regarding sales in 2015?

SELECT o.order_id,  '$' || TO_CHAR(SUM(od.order_sales), '999,999,990.00') AS total_sales 
FROM order_details od
JOIN orders o
USING (order_id)
WHERE EXTRACT(YEAR FROM o.order_date) = 2015
GROUP BY o.order_id
ORDER BY total_sales DESC
LIMIT 1;

--SOLUTION (order_id CA-2015-145317, total_sales 23660.00)
--Joining order_details which has order_details with orders which has order_date using order_id
--Filtering for orders placed in 2015
-- Grouping date by order_id to get total_sales per order
--Formatting sales with a $ sign using TO_CHAR
--Sorting by total_sales in DESC
--Returning the single highest sales order from 2015

--Question 8: Display customer names for customers who are in the segment ‘Consumer’ or ‘Corporate.’
--How many customers are there in total?

SELECT COUNT(DISTINCT customer_id) AS total_customer
FROM customers
WHERE customer_segment IN('Consumer','Corporate');

--SOLUTION (647)
--Filtering customers in 'Consumer' and 'Corporate' segments
--Counts how many unique customer names exist in those two segments
--Using DISTINCT to avoid counting the same name more than once.

--Question 9: Calculate the difference between the largest and smallest order quantities for product id ‘100.’

SELECT MAX(quantity) AS max_quantity, MIN(quantity) AS min_quantity, 
MAX(quantity) - MIN(quantity) AS quantity_difference
FROM order_details
WHERE product_id = 100;

--SOLUTION(quantity_difference 4)
--Starting from the order_details table
--Filtering rows for product with ID 100
--Finding the highest and lowest quantity sold for that product
--Calculating the difference between the max and min

--Question 10:Calculate the percent of products that are within the category ‘Furniture’.

SELECT
pc.total_product,
pc.product_category,
sc.total_sum,
ROUND(pc.total_product*100.0/sc.total_sum, 2) AS percentage
FROM (
  SELECT COUNT(*) AS total_product, product_category
  FROM product
  WHERE product_category = 'Furniture'
  GROUP BY product_category
  ) pc
  CROSS JOIN (
    SELECT COUNT(*) AS total_sum
    FROM product) sc;

--SOLUTION (category ‘Furniture’ %20.54)
--Created two separate queries and packed them in subquerries
--pc = product count // This subquery counts how many products exist in each category
--sc = sum count // This subquery calculates the total number of products overall
--As each subquery runs independently, CROSS JOIN is used to attach the total product count( which is only one row)
--to each product category row, allowing percentage calculation


--Question 11: 11.Display the manufacturers with more than 1 product in the product table, with their number of products.
--Note: Do not sort your results, and do not use distinct because it affects output order.  

SELECT product_manufacturer, COUNT(product_id) AS num_of_products
FROM product
GROUP BY product_manufacturer
HAVING  COUNT(product_id)>1;

--Starting with the product table
--Grouping products by manufacturer name
--Counting how many products each manufacturer has 
--Using HAVING to filter and keep only manufacturers with more than  1 product
--DISTINCT is avoided as requested, and no sorting is applied

--Question 12:Show the product_subcategory and the total number of products in the subcategory.
--Show the order for the most to least number of products.

SELECT product_subcategory, COUNT(*) AS product_count
FROM product
GROUP BY product_subcategory
ORDER BY product_count DESC;

--Starting from the product table
--Grouping all products by their subcategories 
--Counting how many products are in each subcategories 
--Sorting subcategories from most to least number of products

--Question 13: Show the product_id(s), the sum of quantities, where for each sale of product quantities is greater than or equal to 100.

SELECT product_id, SUM(quantity) AS total_quantity
FROM order_details
WHERE quantity >=100
GROUP BY product_id;

--Starting from the order_details table
--Filtering only rows where quantity is 100 or more
--Grouping the remaining rowss by product ID

--Bonus question:
--Join all database tables into one dataset that includes all unique columns and download it as a .csv file.

SELECT
c.customer_id,
c.customer_name,
c.customer_segment,
o.order_id,
o.order_date,
o.shipping_city,
o.shipping_state,
o.shipping_region,
o.shipping_country,
o.shipping_postal_code,
o.shipping_date, 
o.shipping_mode,
od.order_details_id,
od.product_id,
od.quantity,
od.order_discount,
od.order_profits,
od.order_profit_ratio,
od.order_sales,
p.product_name,
p.product_category,
p.product_subcategory,
p.product_manufacturer

FROM customers c
JOIN orders o
USING (customer_id)
JOIN order_details od
USING (order_id)
JOIN product p
USING (product_id);

--Joining all tables using foreign keys
--Including only unique, relevant columns (no repeats)
--Outputting one clean, combined dataset - ready for export
